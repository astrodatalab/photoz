{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b3a63029",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import h5py\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "383024e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def save_results(model, save_path,  num = 28641, with_mag = False):\n",
    "    \"\"\"\n",
    "    Save the results of the model on the valudation data set to the designated position.\n",
    "    \n",
    "    The model should use images with size of 127*127 as input. \n",
    "    \n",
    "    num: integer\n",
    "    The number of data in the validation data set you want to use. Default is 28641, which is the total number of data.\n",
    "    \n",
    "    with_mag: boolean\n",
    "    Whether the model uses magnitudes along with images as input. \n",
    "    \n",
    "    \"\"\"  \n",
    "    \n",
    "    hf = h5py.File('../../data/HSC/HSC_v6/five_band_image127x127_validation_with_metadata_with_scaled.hdf5', 'r')\n",
    "    \n",
    "     \n",
    "    if with_mag:\n",
    "        x_test = []\n",
    "        for i in range (num):\n",
    "            raw_image = hf[\"image\"][i]\n",
    "            raw_image = np.transpose(raw_image,(1,2,0))\n",
    "            image_min = np.min(raw_image)\n",
    "            rescale_image = raw_image+np.full((127,127,5),1-image_min)\n",
    "            log_image = np.log(rescale_image)\n",
    "            norm_image = np.true_divide(log_image,(np.max(log_image)))\n",
    "            x_test.append(norm_image)\n",
    "\n",
    "        x_test = np.array(x_test)\n",
    "        x_train_mags_scaled = hf['scaled_mags'][0:num]\n",
    "        x_train_mags_scaled = pd.DataFrame(x_train_mags_scaled)\n",
    "\n",
    "\n",
    "        object_id = hf[\"object_id\"][0:num]\n",
    "        specz = hf[\"specz_redshift\"][0:num]\n",
    "\n",
    "        predictions = model.predict([x_test,x_train_mags_scaled])\n",
    "        \n",
    "        prediction = []\n",
    "\n",
    "        for i in range(num):\n",
    "            prediction.append(predictions[i][0])\n",
    "\n",
    "        prediction = np.array(prediction)\n",
    "        \n",
    "        d = {'object_id': object_id, 'specz': specz, 'prediction':prediction}\n",
    "        result = pd.DataFrame(d, index = None)\n",
    "        result.to_csv(save_path)\n",
    "        \n",
    "        hf.close()\n",
    "        \n",
    "        \n",
    "    else:\n",
    "        x_test = []\n",
    "        for i in range (num):\n",
    "            raw_image = hf[\"image\"][i]\n",
    "            raw_image = np.transpose(raw_image,(1,2,0))\n",
    "            image_min = np.min(raw_image)\n",
    "            rescale_image = raw_image+np.full((127,127,5),1-image_min)\n",
    "            log_image = np.log(rescale_image)\n",
    "            norm_image = np.true_divide(log_image,(np.max(log_image)))\n",
    "            x_test.append(norm_image)\n",
    "\n",
    "        x_test = np.array(x_test)\n",
    "        object_id = hf[\"object_id\"][0:num]\n",
    "        specz = hf[\"specz_redshift\"][0:num]\n",
    "\n",
    "        \n",
    "        predictions = model.predict(x_test)\n",
    "        \n",
    "        prediction = []\n",
    "\n",
    "        for i in range(num):\n",
    "            prediction.append(predictions[i][0])\n",
    "\n",
    "        prediction = np.array(prediction)\n",
    "        \n",
    "        d = {'object_id': object_id, 'specz': specz, 'prediction':prediction}\n",
    "        result = pd.DataFrame(d)\n",
    "        result.to_csv(save_path)\n",
    "        \n",
    "        hf.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
